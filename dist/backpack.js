!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.Backpack=t():e.Backpack=t()}(this,function(){return function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=3)}([function(e,t,n){e.exports=n(1).default},function(e,t,n){"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),a=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),u=function(){function e(){r(this,e)}return a(e,[{key:"forceFallback",value:function(e){return e instanceof Error?(o.a.log(e),o.a.throwError(e)):(o.a.log(new Error(e).stack),o.a.cancelRequest(e))}},{key:"trigger",value:function(e,t){var n=new CustomEvent(e,{detail:t,bubbles:!0,cancelable:!0});document.dispatchEvent(n)}},{key:"on",value:function(e,t){document.addEventListener(e,function(e){t(e)})}}]),e}();t.default=u},function(e,t,n){"use strict";const r={CORS_PROXY_SERVER:"http://cors.movableink.com",$:function(e,t){return t||(t=document),Array.prototype.slice.call(t.querySelectorAll(e))},param:function(e){return r.params()[e]},params:function(e){if(void 0===r._urlParams){r._urlParams={};for(var t,n=/([^&=]+)=?([^&]*)/g,o=r._searchString();t=n.exec(o);)r._urlParams[decodeURIComponent(t[1])]=decodeURIComponent(t[2])}return e?r._urlParams[e]:r._urlParams},_searchString:function(){return window.location.search.substring(1)},autofill:function(){r.param("init"),Object.keys(r._urlParams).forEach(function(e){"undefined"!==r._urlParams[e]&&r._urlParams[e].length>0&&document.getElementById("autofill_"+e)&&(document.getElementById("autofill_"+e).innerHTML=r._urlParams[e])})},throwError:function(e){"undefined"==typeof MICapture?r.log("Capturama error: "+e):MICapture.error(e)},cancelRequest:function(e){"undefined"==typeof MICapture?r.log("Request canceled: "+e):MICapture.cancel(e)},setImageRedirect:function(e){var t=document.querySelector("#mi-redirect-image");return t=t||document.createElement("a"),t.href=e,t.id="mi-redirect-image",t.style.display="none",document.body.appendChild(t),t},setClickthrough:function(e){var t=document.querySelector("#mi_dynamic_link");return t=t||document.createElement("a"),t.href=e,t.id="mi_dynamic_link",t.style.display="none",document.body.appendChild(t),t},setExtraData:function(e){var t=document.querySelector("#mi-data");t=t||document.createElement("div"),t.id="mi-data",t.style.display="none";var n;try{n=JSON.parse(t.getAttribute("data-mi-data"))||{}}catch(e){n={}}for(var r in e)e.hasOwnProperty(r)&&(n[r]=e[r]);return t.setAttribute("data-mi-data",JSON.stringify(n)),document.body.appendChild(t),t},proxyUrl:function(e){var t=document.createElement("a"),n="";return t.href=e,n="0"===t.port||""===t.port?"https:"==t.protocol?":443":"":":"+t.port,[r.CORS_PROXY_SERVER,"/",t.hostname,n,t.pathname,t.search,t.hash].join("")},_readyToCapture:!0,_openCalls:0,_reset:function(){r._openCalls=0,r._readyToCapture=!0},suspend:function(e,t){t=t||"manual suspension",e&&(t+=", will end in "+e+"ms",setTimeout(function(){r.capture(t)},e)),r._openCalls++,r._readyToCapture=!1,"undefined"==typeof MICapture?r.log("suspended: "+t):MICapture.begin(t)},capture:function(e){if(--r._openCalls>0)return void r.log("outstanding calls, not capturing: "+e);r._readyToCapture=!0,"undefined"==typeof MICapture?r.log("now ready to capture: "+e):(r.$("body")[0].style.width=r.$("body")[0].offsetWidth+"px",MICapture.end(e))},getCORS:function(e,t,n){var o=Array.prototype.slice.call(arguments);return e=o[0],n=o.pop(),t=o[1]||{},t.corsCacheTime=t.corsCacheTime||1e4,e.match(/cors.movableink.com/)||(e=r.proxyUrl(e)),t.headers=t.headers||{},t.headers["x-reverse-proxy-ttl"]=t.corsCacheTime/1e3,t.headers["x-mi-cbe"]=this._hashForRequest(e,t),r.get(e,t,n)},get:function(e,t,n){var o=Array.prototype.slice.call(arguments);e=o[0],n=o.pop(),t=o[1]||{};var a="xhr: "+e,u=new XMLHttpRequest;if(u.onerror=function(){r.capture(a),r.log("XHR error for "+e),n(null,this.status)},u.onload=function(){r.capture(a);var e=this.getResponseHeader("content-type");n(this.responseText,this.status,e)},u.open(t.method||"GET",e,!0),u.withCredentials=!0,t.headers)for(var i in t.headers)u.setRequestHeader(i,t.headers[i]);u.send(t.body),r.suspend(t.maxSuspension,a)},getImage:function(e,t,n){var o=Array.prototype.slice.call(arguments);n=o.pop(),e=o[0],t=o[1]||{};var a="getImage: "+e,u=new Image;u.onload=function(){r.capture(a),n&&n(u)},u.onerror=function(){r.capture(a),n(null)},u.src=e,r.suspend(t.maxSuspension,a)},getImages:function(e,t,n,o){function a(){var e=s+1;c[e]&&(o&&o(c[e]),s=e,a())}function u(){0==i&&(r.capture(l),n&&n(c))}"function"==typeof t&&(o=n,n=t,t={}),t=t||{};for(var i=e.length,c=[],s=-1,l="getImages",d=0;d<e.length;d++)!function(e,t){var n=new Image;n.onload=function(){i-=1,c[t]=n,a(),u()},n.onerror=function(){i-=1,r.log("Image load error for "+e),u()},n.src=e}(e[d],d);r.suspend(t.maxSuspension,l)},waitForAsset:function(e){"undefined"==typeof MICapture?r.log("Wait for asset: "+e):MICapture.waitForAsset(e)},log:function(e){console.log(e)},_hashForRequest:function(e,t){var n=e+JSON.stringify(t),r=0;if(0===n.length)return r;for(var o=0;o<n.length;o++)r=(r<<5)-r+n.charCodeAt(o)&4294967295;return r.toString()}};t.a=r},function(e,t,n){e.exports=n(0)}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,