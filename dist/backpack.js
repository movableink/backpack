!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.Backpack=e():t.Backpack=e()}(this,function(){return function(t){function e(r){if(n[r])return n[r].exports;var a=n[r]={i:r,l:!1,exports:{}};return t[r].call(a.exports,a,a.exports,e),a.l=!0,a.exports}var n={};return e.m=t,e.c=n,e.i=function(t){return t},e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=2)}([function(t,e,n){t.exports=n(1).default},function(t,e,n){"use strict";function r(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(e,"__esModule",{value:!0});var a=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),o=function(){function t(){r(this,t)}return a(t,[{key:"forceFallback",value:function(t){var e=this.extraData?this.extraData:{};return this.setState("default",!0),CD.setExtraData(e),t instanceof Error?(CD.log(t),CD.throwError(t)):(CD.log(new Error(t).stack),CD.cancelRequest(t))}},{key:"trigger",value:function(t,e){var n=new CustomEvent(t,{detail:e,bubbles:!0,cancelable:!0});document.dispatchEvent(n)}},{key:"on",value:function(t,e){document.addEventListener(t,function(t){e(t)})}},{key:"setState",value:function(t,e){this.extraData=this.extraData?this.extraData:{},this.extraData[t]=e}},{key:"getState",value:function(){return this.extraData}}]),t}();e.default=o},function(t,e,n){t.exports=n(0)}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,