!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define([],n):"object"==typeof exports?exports.Backpack=n():e.Backpack=n()}(this,function(){return function(e){function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}var t={};return n.m=e,n.c=t,n.i=function(e){return e},n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p="",n(n.s=2)}([function(e,n,t){e.exports=t(1).default},function(e,n,t){"use strict";function r(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(n,"__esModule",{value:!0});var o=function(){function e(e,n){for(var t=0;t<n.length;t++){var r=n[t];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(n,t,r){return t&&e(n.prototype,t),r&&e(n,r),n}}(),u=function(){function e(){r(this,e)}return o(e,[{key:"forceFallback",value:function(e){return e instanceof Error?(CD.log(e),CD.throwError(e)):(CD.log(new Error(e).stack),CD.cancelRequest(e))}},{key:"trigger",value:function(e,n){var t=new CustomEvent(e,{detail:n,bubbles:!0,cancelable:!0});document.dispatchEvent(t)}},{key:"on",value:function(e,n){document.addEventListener(e,function(e){n(e)})}}]),e}();n.default=u},function(e,n,t){e.exports=t(0)}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,